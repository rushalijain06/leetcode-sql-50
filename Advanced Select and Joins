1) The Number of Employees Which Report to Each Employee
SELECT e1.employee_id, e1.name, COUNT(e1.employee_id) AS reports_count, ROUND(AVG(e2.age),0) AS average_age
FROM Employees e1, Employees e2
WHERE e1.employee_id = e2.reports_to
GROUP BY e1.employee_id
ORDER BY e1.employee_id;

2) Primary Department for Each Employee
    SELECT employee_id, department_id FROM Employee
    WHERE primary_flag = 'Y'
    GROUP BY employee_id
    UNION
    SELECT employee_id, department_id FROM Employee
    GROUP BY employee_id
    HAVING COUNT(department_id) = 1

3) Triangle Judgement
SELECT x, y, z,
CASE WHEN (x+y) > z AND (y+z) > x AND (x+z) > y THEN 'Yes' ELSE 'No' END AS triangle
FROM Triangle;

4) Consecutive Numbers
WITH consecutive AS(
    SELECT num,
    LEAD(num,1) OVER(ORDER BY id ASC) next_num1,
    LEAD(num,2) OVER(ORDER BY id ASC) next_num2,
    LAG(num,1) OVER(ORDER BY id ASC) prev_num1,
    LAG(num,2) OVER(ORDER BY id ASC) prev_num2,
    id,
    LEAD(id,1) OVER(ORDER BY id ASC) next_id1,
    LEAD(id,2) OVER(ORDER BY id ASC) next_id2,
    LAG(id,1) OVER(ORDER BY id ASC) prev_id1,
    LAG(id,2) OVER(ORDER BY id ASC) prev_id2
        FROM Logs
)
SELECT DISTINCT num AS ConsecutiveNums
FROM consecutive
WHERE (num = next_num1 AND next_num1 = next_num2) AND (id = next_id1 - 1 AND next_id1 = next_id2 - 1)
OR (prev_num1 = num AND num = next_num1) AND (prev_id1 = id - 1 AND id = next_id1 - 1)
OR (prev_num1 = prev_num2 AND prev_num2 = num) AND (prev_id1 = prev_id2 - 1 AND prev_id2 = id - 1)

5) Product Price at a Given Date
WITH max_date AS(
    SELECT product_id, 
        new_price,    
        change_date, DENSE_RANK() OVER(PARTITION BY product_id ORDER BY change_date DESC) AS rnk
    FROM Products
    WHERE change_date <= '2019-08-16'
    
)

SELECT product_id, new_price AS price
FROM max_date 
WHERE rnk = 1
UNION 
SELECT product_id, 10 FROM Products
WHERE product_id NOT IN (SELECT product_id FROM max_date);

6) Last Person to Fit in the Bus
WITH total_weight AS(
    SELECT *, SUM(weight) OVER(ORDER BY turn) AS sum_weight
FROM Queue
)

SELECT person_name FROM total_weight
WHERE sum_weight <= 1000
ORDER BY sum_weight DESC
LIMIT 1
;

7) Count Salary Categories
SELECT "Low Salary" AS category, (SELECT COUNT(*) FROM Accounts WHERE income < 20000) AS accounts_count
FROM Accounts
UNION
SELECT "Average Salary" AS category, (SELECT COUNT(*) FROM Accounts WHERE income >= 20000 AND income <= 50000) AS accounts_count
FROM Accounts
UNION
SELECT "High Salary" AS category, (SELECT COUNT(*) FROM Accounts WHERE income > 50000) AS accounts_count
FROM Accounts;
